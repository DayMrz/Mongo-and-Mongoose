=================
MONGO - database
=================

Acording to Mongo's homepage, it is "the most popular database for modern applications" It is commonly used in combination with Node.

Mongo is a document database, which we can use to store and retrieve complex data from 

==================
Why use a database?
====================

Instead of just saving to a file?

* Databases can handle large amounts of data efficiently and store it compactly.
* They provide tools for easy insertion, queryng, and updating of data. 
* They generally offer security features and controls over access to a data.
* They (generally) scale well. 


======================================================
SQL DATABASES            vs          NO-SQL DATABASES
======================================================
Structured Query Language           NoSQL databases do not use SQL.
databases are relational            There are many types of no-sql databases 
databases.                          including document. 
We pre-define a schema of           key-value, and graph stores.
tables before we insert anything


============================================
Mongodb running on GitBash
==============================================

Dayhana Munoz@DayM MINGW64 ~ (master)
$ mongo
MongoDB shell version v4.4.6
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("a6c0ab96-9819-4e48-9ed1-8d0ef4b9db77") }
MongoDB server version: 4.4.6
show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
use animalShelter
switched to db animalShelter // creating a database


==========================================
What is BSON (https://docs.mongodb.com/realm/functions/json-and-bson/#json--javascript-object-notation-)
=============================================

Simply stands for binary JSON and that's exactly what it was invented to be. BSON's binary structure encodes type and length information, which allows it to be parsed much more quickly. 

===========================================
Inserting with Mongo
===========================================

Give Feedback
MongoDB provides the following methods for inserting documents into a collection:

1) db.collection.insertOne()
            Inserts a single document into a collection.
2) db.collection.insertMany()
            db.collection.insertMany() inserts multiple documents into a collection.
3) db.collection.insert()
            db.collection.insert() inserts a single document or multiple documents into a collection.

e.g. first method

db.dogs.insertOne({name: "Charlie", age: 3, breed: "corgi", catFriendly: true})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("60a09cd190e06e5f59c06ddf")
}

            show collections
            dogs
            db.dogs.find()
            { "_id" : ObjectId("60a09cd190e06e5f59c06ddf"), "name" : "Charlie", "age" : 3, "breed" : "corgi", "catFriendly" : true }


e.g. third method

db.dogs.insert([{name: "Wyatt", breed: "Golden", age: 14, catFriendly: false},{name: "Tonya", breed: "chihuahua", age: 17, catFriendly: true}])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
    })
            db.dogs.find()
            { "_id" : ObjectId("60a09cd190e06e5f59c06ddf"), "name" : "Charlie", "age" : 3, "breed" : "corgi", "catFriendly" : true }
            { "_id" : ObjectId("60a09e3a90e06e5f59c06de0"), "name" : ")\u001b[DWyatt", "breed" : "Golden", "age" : 14, "catFriendly" : false }
            { "_id" : ObjectId("60a09e3a90e06e5f59c06de1"), "name" : "Tonya", "breed" : "chihuahua", "age" : 17, "catFriendly" : true }
d

==================================================
Finding with Mongo.
================================================

I can find all matches for one result. with the find() method.  in this case breed.
e.g.
db.dogs.find({breed: "corgi"})
{ "_id" : ObjectId("60a270357fa04521035fcd64"), "name" : "Charlie", "age" : 3, "breed" : "corgi", "catFriendly" : true }
{ "_id" : ObjectId("60a270477fa04521035fcd65"), "name" : "Charlie", "age" : 3, "breed" : "corgi", "catFriendly" : true }
{ "_id" : ObjectId("60a3ba8b8cec1d648c114567"), "name" : "Charlie", "age" : 3, "breed" : "corgi", "catFriendly" : true }
{ "_id" : ObjectId("60a3baa48cec1d648c114568"), "name" : "Charlie", "age" : 3, "breed" : "corgi", "catFriendly" : true }

or i can find a specific one with the findOne() method
e.g.

db.dogs.findOne({catFriendly: true})

================================================================
Updating with Mongo
================================================================
we can update using the 
db.collection.updateOne(<filter>, <update>, <options>)
db.collection.updateMany(<filter>, <update>, <options>)
db.collection.replaceOne(<filter>, <update>, <options>)


to create this updates we have to use the $set operator,  it will replace the value of a field with the specified value. 

it has the following Syntax. 
{$set: {<field>: <value>}}

this summarize eith the updatingOne() method will look like this. 

db.updatingOne({name: "Charlie"}, {$set: {age: 4}})
as a result I am gonna have the value we set for age. 
Besides it will create a new field in case i didn't set any value.

db.updatingOne({name: "Charlie"}, {$set: {color: chocolate}})

db.dogs.find()
{ "_id" : ObjectId("60a09cd190e06e5f59c06ddf"), "name" : "Charlie", "age" : 4, "breed" : "corgi", "catFriendly" : true, "color" : "chocolate" } --> yayy!
{ "_id" : ObjectId("60a09e3a90e06e5f59c06de0"), "name" : ")\u001b[DWyatt", "breed" : "Golden", "age" : 14, "catFriendly" : false }
{ "_id" : ObjectId("60a09e3a90e06e5f59c06de1"), "name" : "Tonya", "breed" : "chihuahua", "age" : 17, "catFriendly" : true }

=====================================================
Deleting with Mongo
=====================================================
Delete Only One Document that Matches a Condition
To delete at most a single document that matches a specified filter (even though multiple documents may match the specified filter) use the db.collection.deleteOne() method.

The following example deletes the FIRST document where status is "D":

db.inventory.deleteOne( { status: "D" } )

e.g., 
db.soup.find()
{ "_id" : ObjectId("60a50723b8a1b42a9e9f2f09"), "flavor" : "tomato", "preparationTime" : "7 minutes", "ingredients" : "5 ingredients", "type" : "Tomatoe Soup" }
{ "_id" : ObjectId("60a509b8b8a1b42a9e9f2f0a"), "type" : "Chicken Soup", "preparationTime" : "30 minutes", "ingredients" : "10 ingredients" }
{ "_id" : ObjectId("60a509b8b8a1b42a9e9f2f0b"), "type" : "Beef Soup", "preparationTime" : "40 minutes", "ingredients" : "15 ingredients" }
db.soup.deleteOne({falvor: "tomato"})
{ "acknowledged" : true, "deletedCount" : 0 }


db.soup.deleteOne({flavor: "tomato"})
{ "acknowledged" : true, "deletedCount" : 1 }
db.soup.find()
{ "_id" : ObjectId("60a509b8b8a1b42a9e9f2f0a"), "type" : "Chicken Soup", "preparationTime" : "30 minutes", "ingredients" : "10 ingredients" }
{ "_id" : ObjectId("60a509b8b8a1b42a9e9f2f0b"), "type" : "Beef Soup", "preparationTime" : "40 minutes", "ingredients" : "15 ingredients" }

===
Delete All Documents that Match a Condition
You can specify criteria, or filters, that identify the documents to delete. The filters use the same syntax as read operations.

To specify equality conditions, use <field>:<value> expressions in the query filter document:

{ <field1>: <value1>, ... }

A query filter document can use the query operators to specify conditions in the following form:

{ <field1>: { <operator1>: <value1> }, ... }

To delete all documents that match a deletion criteria, pass a filter parameter to the deleteMany() method.

The following example removes all documents from the inventory collection where the status field equals "A":

db.inventory.deleteMany({ status : "A" })

The method returns a document with the status of the operation. For more information and examples, see deleteMany().

e.g., db.soup.deleteMany({type: "Chicken Soup", type: "Beef Soup"})
{ "acknowledged" : true, "deletedCount" : 1 }
                            --> this will delete ALL documents that match that condition.

db.soup.deleteMany({})
{ "acknowledged" : true, "deletedCount" : 1 }
                            ---> this will delete EVERYTHING
                        
==================================================
Additional Mongo Operators.
================================================== 
> db.dogs.find()
            { "_id" : ObjectId("60a7112fa88f5c62923c25d1"), "name" : "Rusty", "breed" : "Mutt", "age" : 3, "weight" : 25, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
            { "_id" : ObjectId("60a7112fa88f5c62923c25d2"), "name" : "Chungus", "breed" : "Husky", "age" : 3, "weight" : 65, "size" : "L", "personality" : { "catFriendly" : false, "childFriendly" : true } }
            { "_id" : ObjectId("60a7112fa88f5c62923c25d3"), "name" : "Bella", "breed" : "Chihuahua", "age" : 8, "weight" : 7, "size" : "S", "personality" : { "catFriendly" : false, "childFriendly" : false } }
            { "_id" : ObjectId("60a7112fa88f5c62923c25d4"), "name" : "Malakai", "breed" : "Great Pyrenees", "age" : 2, "weight" : 110, "size" : "L", "personality" : { "catFriendly" : false, "childFriendly" : true } }
            { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
            { "_id" : ObjectId("60a7145ae94bace87569616e"), "name" : "Mishka", "breed" : "Corgi", "age" : 13, "weight" : 27, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }

> db.dogs.find({age: 10})
            { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }

> db.dogs.find({'personality.catFriendly': true})
            { "_id" : ObjectId("60a7112fa88f5c62923c25d1"), "name" : "Rusty", "breed" : "Mutt", "age" : 3, "weight" : 25, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
            { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
            { "_id" : ObjectId("60a7145ae94bace87569616e"), "name" : "Mishka", "breed" : "Corgi", "age" : 13, "weight" : 27, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }

> db.dogs.find({'personality.catFriendly': true, age: 10})
            { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }


**********
OPERATORS

https://docs.mongodb.com/manual/reference/operator/query/
***********

e.g., 
        $gt Matches values that are greater than specified value.
    -->  Syntax: {field: {$gt: value} }

$gt
> db.dogs.find({age: {$gt: 8}})
        { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
        { "_id" : ObjectId("60a7145ae94bace87569616e"), "name" : "Mishka", "breed" : "Corgi", "age" : 13, "weight" : 27, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }

$gt
> db.dogs.find({weight: {$gt: 50}})
        { "_id" : ObjectId("60a7112fa88f5c62923c25d2"), "name" : "Chungus", "breed" : "Husky", "age" : 3, "weight" : 65, "size" : "L", "personality" : { "catFriendly" : false, "childFriendly" : true } }
        { "_id" : ObjectId("60a7112fa88f5c62923c25d4"), "name" : "Malakai", "breed" : "Great Pyrenees", "age" : 2, "weight" : 110, "size" : "L", "personality" : { "catFriendly" : false, "childFriendly" : true } }

$in
> db.dogs.find({breed: {$in: ['Husky', 'Corgi']}})
        { "_id" : ObjectId("60a7112fa88f5c62923c25d2"), "name" : "Chungus", "breed" : "Husky", "age" : 3, "weight" : 65, "size" : "L", "personality" : { "catFriendly" : false, "childFriendly" : true } }
        { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
        { "_id" : ObjectId("60a7145ae94bace87569616e"), "name" : "Mishka", "breed" : "Corgi", "age" : 13, "weight" : 27, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }

$and   $exists
> db.dogs.find({$and: [{weight: {$lte: 31} }, {weight: {$exists: true }}] })
        { "_id" : ObjectId("60a7112fa88f5c62923c25d1"), "name" : "Rusty", "breed" : "Mutt", "age" : 3, "weight" : 25, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
        { "_id" : ObjectId("60a7112fa88f5c62923c25d3"), "name" : "Bella", "breed" : "Chihuahua", "age" : 8, "weight" : 7, "size" : "S", "personality" : { "catFriendly" : false, "childFriendly" : false } }
        { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
        { "_id" : ObjectId("60a7145ae94bace87569616e"), "name" : "Mishka", "breed" : "Corgi", "age" : 13, "weight" : 27, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }

$or  $lte
> db.dogs.find({$or: [{'personality.catFriendly': true}, {age:{$lte: 2} }] })
        { "_id" : ObjectId("60a7112fa88f5c62923c25d1"), "name" : "Rusty", "breed" : "Mutt", "age" : 3, "weight" : 25, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
        { "_id" : ObjectId("60a7112fa88f5c62923c25d4"), "name" : "Malakai", "breed" : "Great Pyrenees", "age" : 2, "weight" : 110, "size" : "L", "personality" : { "catFriendly" : false, "childFriendly" : true } }
        { "_id" : ObjectId("60a7145ae94bace87569616d"), "name" : "Dogger", "breed" : "Corgi", "age" : 10, "weight" : 31, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }
        { "_id" : ObjectId("60a7145ae94bace87569616e"), "name" : "Mishka", "breed" : "Corgi", "age" : 13, "weight" : 27, "size" : "M", "personality" : { "catFriendly" : true, "childFriendly" : true } }

        